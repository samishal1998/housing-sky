generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum RoomType {
  SINGLE
  DOUBLE
  PRESIDENTIAL
}

enum BookingStatus {
  PENDING_RESPONSE
  ACCEPTED
  REJECTED
  CANCELED
}

model Booking {
  id String @id @default(cuid())

  status    BookingStatus @default(PENDING_RESPONSE)
  startDate DateTime
  endDate   DateTime

  pricePerDay Float
  subTotal    Float
  vat         Float
  totalPrice  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation("booked-room", fields: [roomId], references: [id])

  closedBy   HotelManager? @relation(fields: [closedById], references: [id])
  closedById String?

  createdBy   User   @relation("booking-guest", fields: [createdById], references: [id])
  createdById String
}

model Room {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive      Boolean  @default(true)
  floor         Int
  space         String
  description   String?
  images        String[]
  type          RoomType
  vatPercentage Int
  pricePerDay   Float

  hotelId  String
  hotel    Hotel     @relation("hotel-rooms", references: [id], fields: [hotelId])
  bookings Booking[] @relation("booked-room")

  createdBy   HotelManager @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Hotel {
  id         String @id @default(cuid())
  name       String
  starRating Int?
  address    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?

  rooms         Room[]         @relation("hotel-rooms")
  hotelManagers HotelManager[] @relation("hotel-managers")

  @@index([name])
}

model HotelManager {
  id             String    @id @default(cuid())
  hotel          Hotel     @relation("hotel-managers", references: [id], fields: [hotelId])
  user           User      @relation("hotel-access", references: [id], fields: [userId])
  userId         String    @unique
  hotelId        String
  closedBookings Booking[]
  roomsCreated   Room[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation("user-accounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("user-sessions", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  passwordHash      String?
  emailVerified     DateTime?
  image             String?
  accounts          Account[]     @relation("user-accounts")
  sessions          Session[]     @relation("user-sessions")
  submittedBookings Booking[]     @relation("booking-guest")
  hotelAccess       HotelManager? @relation("hotel-access")
  role              UserRole      @default(GUEST)
}

enum UserRole {
  GUEST
  HOTEL_MANAGER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

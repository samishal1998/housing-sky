// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum RoomType {
  SINGLE
  DOUBLE
  PRESDENTIAL
}

enum BookingStatus {
  PENDING_RESPONSE
  ACCEPTED
  REJECTED
  CANCELED
}

model Booking {
  id   String @id @default(cuid())
  name String

  status    BookingStatus
  startDate DateTime
  endDate   DateTime

  pricePerDay Float
  subTotal    Float
  vat         Float
  totalPrice  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])

  acceptedBy   HotelManager @relation(fields: [acceptedById], references: [id])
  acceptedById String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model Room {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  floor       Int
  space       String
  description String?
  images      String[]
  type        RoomType

  pricePerDay Float

  hotelId  String
  hotel    Hotel     @relation(references: [id], fields: [hotelId])
  bookings Booking[]

  createdBy   HotelManager @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Hotel {
  id         String @id @default(cuid())
  name       String
  starRating Int
  address    String
  location   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?
  images      String[]

  rooms        Room[]         @relation()
  hotelManagers HotelManager[]

  @@index([name])
}

model HotelManager {
  id             String    @id @default(cuid())
  hotel          Hotel     @relation(references: [id], fields: [hotelId])
  user           User      @relation(references: [id], fields: [userId])
  userId         String
  hotelId        String
  closedBookings Booking[]
  roomsCreated   Room[]
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  submittedBookings Booking[]
  hotelsAccess      HotelManager[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
